// Code snippets and templates from Decimal.js

;(function (globalScope) {
  'use strict';


  // --  EDITABLE DEFAULTS  -- //
    var OmegaNum = {

      // The rounding mode used by default by `toInteger`, `toDecimalPlaces`, `toExponential`,
      // `toFixed`, `toPrecision` and `toSignificantDigits`.
      //
      // ROUND_UP         0 Away from zero.
      // ROUND_DOWN       1 Towards zero.
      // ROUND_CEIL       2 Towards +Infinity.
      // ROUND_FLOOR      3 Towards -Infinity.
      // ROUND_HALF_UP    4 Towards nearest neighbour. If equidistant, up.
      // ROUND_HALF_DOWN  5 Towards nearest neighbour. If equidistant, down.
      // ROUND_HALF_EVEN  6 Towards nearest neighbour. If equidistant, towards even neighbour.
      // ROUND_HALF_CEIL  7 Towards nearest neighbour. If equidistant, towards +Infinity.
      // ROUND_HALF_FLOOR 8 Towards nearest neighbour. If equidistant, towards -Infinity.
      //
      // E.g.
      // `OmegaNum.rounding = 4;`
      // `OmegaNum.rounding = OmegaNum.ROUND_HALF_UP;`
      // Unused
      rounding: 4,                           // 0 to 8

      // The maximum number of arrows accepted in operation.
      // It will warn and then return Infinity if exceeded.
      // This is to prevent loops to not be breaking, and also to prevent memory leaks.
      // 1000 means operation above {1000} is disallowed.
      // It is not recommended to make this number too big.
      // `OmegaNum.maxArrow = 1000;`
      maxArrow: 1e3,
      
      // Level of debug information printed in console
      // 
      // NONE   0 Show no information.
      // NORMAL 1 Show operations.
      // ALL    2 Show everything.
      debug: 0
    },


  // -- END OF EDITABLE DEFAULTS -- //


    external = true,

    omegaNumError = '[OmegaNumError] ',
    invalidArgument = omegaNumError + 'Invalid argument: ',

    mathfloor = Math.floor,
    mathpow = Math.pow,

    isOmegaNum = /^(\d+(\.\d*)?|\.\d+)(e[+-]?\d+)?$/i,

    BASE = 10,
    LOG_BASE = 1,
    MAX_SAFE_INTEGER = 9007199254740991,
    MAX_E = Math.log10(MAX_SAFE_INTEGER),    // 1286742750677284

    // OmegaNum.prototype object
    P={},
    // OmegaNum static object
    Q={};

  // OmegaNum prototype methods

  /*
   *  absoluteValue             abs
   *  arrow
   *  ceiling                   ceil
   *  chain
   *  comparedTo                cmp
   *  cubeRoot                  cbrt
   *  divide                    div
   *  equals                    eq
   *  exponential               exp
   *  factorial                 fact
   *  floor
   *  generalLogarithm          log10
   *  greaterThan               gt
   *  greaterThanOrEqualTo      gte
   *  hyper
   *  isFinite
   *  isInteger                 isint
   *  isNaN
   *  isNegative                isneg
   *  isPositive                ispos
   *  lessThan                  lt
   *  lessThanOrEqualTo         lte
   *  logarithm                 logBase
   *  minus                     sub
   *  modulo                    mod
   *  naturalLogarithm          ln        log
   *  negated                   neg
   *  pentate                   pent
   *  plus                      add
   *  reciprocate               rec
   *  root
   *  round
   *  squareRoot                sqrt
   *  times                     mul
   *  tetrate                   tetr
   *  toNumber
   *  toPower                   pow
   *  toString
   */
  P.absoluteValue=P.abs=function(){
   	var x=this.clone();
    x.sign=1;
    return x;
  }
  Q.absoluteValue=Q.abs=function(x){
    return OmegaNum(x).abs();
  }
  P.negate=P.neg=function (){
    var x=this.clone();
    x.sign=x.sign*-1;
    return x;
  }
  Q.negate=Q.neg=function (x){
    return OmegaNum(x).neg();
  }
  P.compareTo=P.cmp=function (other){
    other=OmegaNum(other);
    if ((this.sign==1)&&(other.sign==-1)) return 1;
    if ((this.sign==-1)&&(other.sign==1)) return -1;
    if ((this.sign==-1)&&(other.sign==-1)) return this.neg().cmp(other.neg())*-1;
    if (this.array.length>other.array.length) return 1;
    if (this.array.length<other.array.length) return -1;
    for (var i=this.array.length-1;i>=0;i--){
      if (this.array[i]>other.array[i]) return 1;
      if (this.array[i]<other.array[i]) return -1;
    }
    return 0;
  }
  Q.compare=Q.cmp=function (x,y){
    return OmegaNum(x).cmp(y);
  }
  P.greaterThan=P.gt=function (other){
    return this.cmp(other)>0;
  }
  Q.greaterThan=Q.gt=function (x,y){
    return OmegaNum(x).gt(y);
  }
  P.greaterThanOrEqualTo=P.gte=function (other){
    return this.cmp(other)>=0;
  }
  Q.greaterThanOrEqualTo=Q.gte=function (x,y){
    return OmegaNum(x).gte(y);
  }
  P.lessThan=P.lt=function (other){
    return this.cmp(other)<0;
  }
  Q.lessThan=Q.lt=function (x,y){
    return OmegaNum(x).lt(y);
  }
  P.lessThanOrEqualTo=P.lte=function (other){
    return this.cmp(other)<=0;
  }
  Q.lessThanOrEqualTo=Q.lte=function (x,y){
    return OmegaNum(x).lte(y);
  }
  P.equalsTo=P.equal=P.eq=function (other){
    return this.cmp(other)==0;
  }
  Q.equalsTo=Q.equal=Q.eq=function (x,y){
    return OmegaNum(x).eq(y);
  }
  P.minimum=P.min=function (other){
    return this.lt(other)?this.clone():OmegaNum(other);
  }
  Q.minimum=Q.min=function (x,y){
    return OmegaNum(x).min(y);
  }
  P.maximum=P.max=function (other){
    return this.gt(other)?this.clone():OmegaNum(other);
  }
  Q.maximum=Q.max=function (x,y){
    return OmegaNum(x).max(y);
  }
  P.isPositive=P.ispos=function (){
    return this.gt(0);
  }
  Q.isPositive=Q.ispos=function (x){
    return OmegaNum(x).ispos();
  }
  P.isNegative=P.isneg=function (){
    return this.lt(0);
  }
  Q.isNegative=Q.isneg=function (x){
    return OmegaNum(x).isneg();
  }
  P.isNaN=function (){
    return isNaN(this.array[0]);
  }
  Q.isNaN=function (x){
    return OmegaNum(x).isNaN();
  }
  P.isFinite=function (){
    return isFinite(this.array[0]);
  }
  Q.isFinite=function (x){
    return OmegaNum(x).isFinite();
  }
  P.isInteger=P.isint=function (){
    if (this.sign==-1) return this.abs().isint();
    if (this.gt(MAX_SAFE_INTEGER)) return true;
    return Number.isInteger(this.toNumber());
  }
  Q.isInteger=Q.isint=function (x){
    return OmegaNum(x).isint();
  }
  P.floor=function (){
    if (this.isInteger()) return this.clone();
    return OmegaNum(Math.floor(this.toNumber()));
  }
  Q.floor=function (x){
    return OmegaNum(x).floor();
  }
  P.ceiling=P.ceil=function (){
    if (this.isInteger()) return this.clone();
    return OmegaNum(Math.ceil(this.toNumber()));
  }
  Q.ceiling=Q.ceil=function (x){
    return OmegaNum(x).ceil();
  }
  P.round=function (){
    if (this.isInteger()) return this.clone();
    return OmegaNum(Math.round(this.toNumber()));
  }
  Q.round=function (x){
    return OmegaNum(x).round();
  }
  P.plus=P.add=function (other){
    var x=this.clone();
    var other=OmegaNum(other);
    if (OmegaNum.debug>=OmegaNum.NORMAL) console.log(this+"+"+other);
    if (x.sign==-1) return x.neg().add(other.neg()).neg();
    if (other.sign==-1) return x.sub(other.neg());
    if (other.eq(0)) return x;
    if (x.max(other).gt("e"+MAX_SAFE_INTEGER)||x.div(other).max(other.div(x)).gt(MAX_SAFE_INTEGER)) return x.max(other);
    var y=x.min(other);
    x=x.max(other);
    if (!x.array[1]){
      return OmegaNum(x.toNumber()+y.toNumber());
    }else if (x.array[1]==1){
      if (!y.array[1]){
        y.array[0]=Math.log10(y.array[0]);
        y.array[1]=(y.array[1]+1)||1;
      }
      return OmegaNum([y.array[0]+Math.log10(Math.pow(10,x.array[0]-y.array[0])+1),1]);
    }
  }
  Q.plus=Q.add=function (x,y){
    return OmegaNum(x).add(y);
  }
  P.minus=P.sub=function (other){
    var x=this.clone();
    var other=OmegaNum(other);
    if (OmegaNum.debug>=OmegaNum.NORMAL) console.log(this+"-"+other);
    if (x.sign==-1) return x.neg().sub(other.neg()).neg();
    if (other.sign==-1) return x.add(other.neg());
    if (x.eq(other)) return OmegaNum(0);
    if (other.eq(0)) return x;
    if (x.max(other).gt("e"+MAX_SAFE_INTEGER)||x.div(other).max(other.div(x)).gt(MAX_SAFE_INTEGER)){
      return x.gt(other)?x:OmegaNum(other).neg();
    }
    var y=x.min(other);
    x=x.max(other);
    if (!x.array[1]){
      var r=OmegaNum(x.toNumber()-y.toNumber());
      return this.gt(other)?r:r.neg();
    }else if (x.array[1]==1){
      if (!y.array[1]){
        y.array[0]=Math.log10(y.array[0]);
        y.array[1]=(y.array[1]+1)||1;
      }
      var r=OmegaNum([y.array[0]+Math.log10(Math.pow(10,x.array[0]-y.array[0])-1),1]);
      return this.gt(other)?r:r.neg();
    }
  }
  Q.minus=Q.sub=function (x,y){
    return OmegaNum(x).sub(y);
  }
  P.times=P.mul=function (other){
    var other=OmegaNum(other);
    if (OmegaNum.debug>=OmegaNum.NORMAL) console.log(this+"*"+other);
    if (this.sign*other.sign==-1) return this.abs().mul(other.abs()).neg();
    if (this.sign==-1) return this.abs().mul(other.abs());
    if (other.eq(0)) return OmegaNum(0);
    if (other.eq(1)) return this.clone();
    if (this.max(other).gt("ee"+MAX_SAFE_INTEGER)) return this.max(other);
    if (this*other<=MAX_SAFE_INTEGER) return OmegaNum(this*other);
    return OmegaNum.pow(10,this.log10().add(other.log10()));
  }
  Q.times=Q.mul=function (x,y){
    return OmegaNum(x).mul(y);
  }
  P.divide=P.div=function (other){
    var other=OmegaNum(other);
    if (OmegaNum.debug>=OmegaNum.NORMAL) console.log(this+"/"+other);
    if (this.sign*other.sign==-1) return this.abs().div(other.abs()).neg();
    if (this.sign==-1) return this.abs().div(other.abs());
    if (other.eq(0)) return OmegaNum(NaN);
    if (other.eq(1)) return this.clone();
    if (this.eq(other)) return OmegaNum(1);
    if (this.max(other).gt("ee"+MAX_SAFE_INTEGER)) return this.gt(other)?this.clone():OmegaNum(0);
    if (this/other<=MAX_SAFE_INTEGER) return OmegaNum(this/other);
	if (OmegaNum.pow(10,this.log10().sub(other.log10())).sub(OmegaNum.pow(10,this.log10().sub(other.log10())).floor()).lt(new OmegaNum(1e-9))) return OmegaNum.pow(10,this.log10().sub(other.log10())).floor();
	return OmegaNum.pow(10,this.log10().sub(other.log10()));
  }
  Q.divide=Q.div=function (x,y){
    return OmegaNum(x).div(y);
  }
  P.reciprocate=P.rec=function (){
    if (OmegaNum.debug>=OmegaNum.NORMAL) console.log(this+"^-1");
    if (this.isNaN()||this.eq(0)) return OmegaNum(NaN);
    if (this.abs().gt(Number.MAX_VALUE)) return OmegaNum(0);
    return OmegaNum(1/this);
  }
  Q.reciprocate=Q.rec=function (x){
    return OmegaNum(x).rec();
  }
  P.modular=P.mod=function (other){
    var other=OmegaNum(other);
    if (other.eq(0)) return OmegaNum(0);
    if (this.sign*other.sign<0) return this.abs().mod(other.abs()).neg();
    if (this.sign<0) return this.abs().mod(other.abs());
    return this.sub(this.div(other).floor().mul(other));
  }
  Q.modular=Q.mod=function (x,y){
    return OmegaNum(x).mod(y);
  }
  Q.factorials=[1, 1, 2, 6, 24, 120, 720, 5040, 40320, 362880, 3628800, 39916800, 479001600, 6227020800, 87178291200, 1307674368000, 20922789888000, 355687428096000, 6402373705728000, 121645100408832000, 2432902008176640000, 51090942171709440000, 1124000727777607680000, 25852016738884976640000, 620448401733239439360000, 15511210043330985984000000, 403291461126605635584000000, 10888869450418352160768000000, 304888344611713860501504000000, 8841761993739701954543616000000, 265252859812191058636308480000000, 8222838654177922817725562880000000, 263130836933693530167218012160000000, 8683317618811886495518194401280000000, 295232799039604140847618609643520000000, 10333147966386144929666651337523200000000, 371993326789901217467999448150835200000000, 13763753091226345046315979581580902400000000, 523022617466601111760007224100074291200000000, 20397882081197443358640281739902897356800000000, 815915283247897734345611269596115894272000000000, 33452526613163807108170062053440751665152000000000, 1405006117752879898543142606244511569936384000000000, 60415263063373835637355132068513997507264512000000000, 2658271574788448768043625811014615890319638528000000000, 119622220865480194561963161495657715064383733760000000000, 5502622159812088949850305428800254892961651752960000000000, 258623241511168180642964355153611979969197632389120000000000, 12413915592536072670862289047373375038521486354677760000000000, 608281864034267560872252163321295376887552831379210240000000000, 30414093201713378043612608166064768844377641568960512000000000000, 1551118753287382280224243016469303211063259720016986112000000000000, 80658175170943878571660636856403766975289505440883277824000000000000, 4274883284060025564298013753389399649690343788366813724672000000000000, 230843697339241380472092742683027581083278564571807941132288000000000000, 12696403353658275925965100847566516959580321051449436762275840000000000000, 710998587804863451854045647463724949736497978881168458687447040000000000000, 40526919504877216755680601905432322134980384796226602145184481280000000000000, 2350561331282878571829474910515074683828862318181142924420699914240000000000000, 138683118545689835737939019720389406345902876772687432540821294940160000000000000, 8320987112741390144276341183223364380754172606361245952449277696409600000000000000, 507580213877224798800856812176625227226004528988036003099405939480985600000000000000, 31469973260387937525653122354950764088012280797258232192163168247821107200000000000000, 1982608315404440064116146708361898137544773690227268628106279599612729753600000000000000, 126886932185884164103433389335161480802865516174545192198801894375214704230400000000000000, 8247650592082470666723170306785496252186258551345437492922123134388955774976000000000000000, 544344939077443064003729240247842752644293064388798874532860126869671081148416000000000000000, 36471110918188685288249859096605464427167635314049524593701628500267962436943872000000000000000, 2480035542436830599600990418569171581047399201355367672371710738018221445712183296000000000000000, 171122452428141311372468338881272839092270544893520369393648040923257279754140647424000000000000000, 11978571669969891796072783721689098736458938142546425857555362864628009582789845319680000000000000000, 850478588567862317521167644239926010288584608120796235886430763388588680378079017697280000000000000000, 61234458376886086861524070385274672740778091784697328983823014963978384987221689274204160000000000000000, 4470115461512684340891257138125051110076800700282905015819080092370422104067183317016903680000000000000000, 330788544151938641225953028221253782145683251820934971170611926835411235700971565459250872320000000000000000, 24809140811395398091946477116594033660926243886570122837795894512655842677572867409443815424000000000000000000, 1885494701666050254987932260861146558230394535379329335672487982961844043495537923117729972224000000000000000000, 145183092028285869634070784086308284983740379224208358846781574688061991349156420080065207861248000000000000000000, 11324281178206297831457521158732046228731749579488251990048962825668835325234200766245086213177344000000000000000000, 894618213078297528685144171539831652069808216779571907213868063227837990693501860533361810841010176000000000000000000, 71569457046263802294811533723186532165584657342365752577109445058227039255480148842668944867280814080000000000000000000, 5797126020747367985879734231578109105412357244731625958745865049716390179693892056256184534249745940480000000000000000000, 475364333701284174842138206989404946643813294067993328617160934076743994734899148613007131808479167119360000000000000000000, 39455239697206586511897471180120610571436503407643446275224357528369751562996629334879591940103770870906880000000000000000000, 3314240134565353266999387579130131288000666286242049487118846032383059131291716864129885722968716753156177920000000000000000000, 281710411438055027694947944226061159480056634330574206405101912752560026159795933451040286452340924018275123200000000000000000000, 24227095383672732381765523203441259715284870552429381750838764496720162249742450276789464634901319465571660595200000000000000000000, 2107757298379527717213600518699389595229783738061356212322972511214654115727593174080683423236414793504734471782400000000000000000000, 185482642257398439114796845645546284380220968949399346684421580986889562184028199319100141244804501828416633516851200000000000000000000, 16507955160908461081216919262453619309839666236496541854913520707833171034378509739399912570787600662729080382999756800000000000000000000, 1485715964481761497309522733620825737885569961284688766942216863704985393094065876545992131370884059645617234469978112000000000000000000000, 135200152767840296255166568759495142147586866476906677791741734597153670771559994765685283954750449427751168336768008192000000000000000000000, 12438414054641307255475324325873553077577991715875414356840239582938137710983519518443046123837041347353107486982656753664000000000000000000000, 1156772507081641574759205162306240436214753229576413535186142281213246807121467315215203289516844845303838996289387078090752000000000000000000000, 108736615665674308027365285256786601004186803580182872307497374434045199869417927630229109214583415458560865651202385340530688000000000000000000000, 10329978488239059262599702099394727095397746340117372869212250571234293987594703124871765375385424468563282236864226607350415360000000000000000000000, 991677934870949689209571401541893801158183648651267795444376054838492222809091499987689476037000748982075094738965754305639874560000000000000000000000, 96192759682482119853328425949563698712343813919172976158104477319333745612481875498805879175589072651261284189679678167647067832320000000000000000000000, 9426890448883247745626185743057242473809693764078951663494238777294707070023223798882976159207729119823605850588608460429412647567360000000000000000000000, 933262154439441526816992388562667004907159682643816214685929638952175999932299156089414639761565182862536979208272237582511852109168640000000000000000000000, 93326215443944152681699238856266700490715968264381621468592963895217599993229915608941463976156518286253697920827223758251185210916864000000000000000000000000, 9425947759838359420851623124482936749562312794702543768327889353416977599316221476503087861591808346911623490003549599583369706302603264000000000000000000000000, 961446671503512660926865558697259548455355905059659464369444714048531715130254590603314961882364451384985595980362059157503710042865532928000000000000000000000000, 99029007164861804075467152545817733490901658221144924830052805546998766658416222832141441073883538492653516385977292093222882134415149891584000000000000000000000000, 10299016745145627623848583864765044283053772454999072182325491776887871732475287174542709871683888003235965704141638377695179741979175588724736000000000000000000000000, 1081396758240290900504101305800329649720646107774902579144176636573226531909905153326984536526808240339776398934872029657993872907813436816097280000000000000000000000000, 114628056373470835453434738414834942870388487424139673389282723476762012382449946252660360871841673476016298287096435143747350528228224302506311680000000000000000000000000, 12265202031961379393517517010387338887131568154382945052653251412013535324922144249034658613287059061933743916719318560380966506520420000368175349760000000000000000000000000, 1324641819451828974499891837121832599810209360673358065686551152497461815091591578895743130235002378688844343005686404521144382704205360039762937774080000000000000000000000000, 144385958320249358220488210246279753379312820313396029159834075622223337844983482099636001195615259277084033387619818092804737714758384244334160217374720000000000000000000000000, 15882455415227429404253703127090772871724410234473563207581748318444567162948183030959960131517678520479243672638179990208521148623422266876757623911219200000000000000000000000000, 1762952551090244663872161047107075788761409536026565516041574063347346955087248316436555574598462315773196047662837978913145847497199871623320096254145331200000000000000000000000000, 197450685722107402353682037275992488341277868034975337796656295094902858969771811440894224355027779366597957338237853638272334919686385621811850780464277094400000000000000000000000000, 22311927486598136465966070212187151182564399087952213171022161345724023063584214692821047352118139068425569179220877461124773845924561575264739138192463311667200000000000000000000000000, 2543559733472187557120132004189335234812341496026552301496526393412538629248600474981599398141467853800514886431180030568224218435400019580180261753940817530060800000000000000000000000000, 292509369349301569068815180481773552003419272043053514672100535242441942363589054622883930786268803187059211939585703515345785120071002251720730101703194015956992000000000000000000000000000, 33931086844518982011982560935885732032396635556994207701963662088123265314176330336254535971207181169698868584991941607780111073928236261199604691797570505851011072000000000000000000000000000, 3969937160808720895401959629498630647790406360168322301129748464310422041758630649341780708631240196854767624444057168110272995649603642560353748940315749184568295424000000000000000000000000000, 468452584975429065657431236280838416439267950499862031533310318788629800927518416622330123618486343228862579684398745837012213486653229822121742374957258403779058860032000000000000000000000000000, 55745857612076058813234317117419771556272886109483581752463927935846946310374691578057284710599874844234646982443450754604453404911734348832487342619913750049708004343808000000000000000000000000000, 6689502913449127057588118054090372586752746333138029810295671352301633557244962989366874165271984981308157637893214090552534408589408121859898481114389650005964960521256960000000000000000000000000000, 809429852527344373968162284544935082997082306309701607045776233628497660426640521713391773997910182738287074185078904956856663439318382745047716214841147650721760223072092160000000000000000000000000000, 98750442008336013624115798714482080125644041369783596059584700502676714572050143649033796427745042294071023050579626404736512939596842694895821378210620013388054747214795243520000000000000000000000000000, 12146304367025329675766243241881295855454217088483382315328918161829235892362167668831156960612640202170735835221294047782591091570411651472186029519906261646730733907419814952960000000000000000000000000000, 1506141741511140879795014161993280686076322918971939407100785852066825250652908790935063463115967385069171243567440461925041295354731044782551067660468376444194611004520057054167040000000000000000000000000000, 188267717688892609974376770249160085759540364871492425887598231508353156331613598866882932889495923133646405445930057740630161919341380597818883457558547055524326375565007131770880000000000000000000000000000000, 23721732428800468856771473051394170805702085973808045661837377170052497697783313457227249544076486314839447086187187275319400401837013955325179315652376928996065123321190898603130880000000000000000000000000000000, 3012660018457659544809977077527059692324164918673621799053346900596667207618480809067860692097713761984609779945772783965563851033300772326297773087851869982500270661791244122597621760000000000000000000000000000000, 385620482362580421735677065923463640617493109590223590278828403276373402575165543560686168588507361534030051833058916347592172932262498857766114955245039357760034644709279247692495585280000000000000000000000000000000, 49745042224772874403902341504126809639656611137138843145968864022652168932196355119328515747917449637889876686464600208839390308261862352651828829226610077151044469167497022952331930501120000000000000000000000000000000, 6466855489220473672507304395536485253155359447828049608975952322944781961185526165512707047229268452925683969240398027149120740074042105844737747799459310029635780991774612983803150965145600000000000000000000000000000000, 847158069087882051098456875815279568163352087665474498775849754305766436915303927682164623187034167333264599970492141556534816949699515865660644961729169613882287309922474300878212776434073600000000000000000000000000000000, 111824865119600430744996307607616902997562475571842633838412167568361169672820118454045730260688510087990927196104962685462595837360336094267205134948250389032461924909766607715924086489297715200000000000000000000000000000000, 14872707060906857289084508911813048098675809251055070300508818286592035566485075754388082124671571841702793317081960037166525246368924700537538282948117301741317436012998958826217903503076596121600000000000000000000000000000000, 1992942746161518876737324194182948445222558439641379420268181650403332765909000151088003004705990626788174304488982644980314383013435909872030129915047718433336536425741860482713199069412263880294400000000000000000000000000000000, 269047270731805048359538766214698040105045389351586221736204522804449923397715020396880405635308734616403531106012657072342441706813847832724067538531441988500432417475151165166281874370655623839744000000000000000000000000000000000, 36590428819525486576897272205198933454286172951815726156123815101405189582089242773975735166401987907830880230417721361838572072126683305250473185240276110436058808776620558462614334914409164842205184000000000000000000000000000000000, 5012888748274991661034926292112253883237205694398754483388962668892510972746226260034675717797072343372830591567227826571884373881355612819314826377917827129740056802397016509378163883274055583382110208000000000000000000000000000000000, 691778647261948849222819828311491035886734385827028118707676848307166514238979223884785249055995983385450621636277440066920043595627074569065446040152660143904127838730788278294186615891819670506731208704000000000000000000000000000000000, 96157231969410890041971956135297253988256079629956908500367081914696145479218112119985149618783441690577636407442564169301886059792163365100096999581219760002673769583579570682891939608962934200435638009856000000000000000000000000000000000, 13462012475717524605876073858941615558355851148193967190051391468057460367090535696797920946629681836680869097041958983702264048370902871114013579941370766400374327741701139895604871545254810788060989321379840000000000000000000000000000000000, 1898143759076170969428526414110767793728175011895349373797246196996101911759765533248506853474785138972002542682916216702019230820297304827075914771733278062452780211579860725280286887880928321116599494314557440000000000000000000000000000000000, 269536413788816277658850750803729026709400851689139611079208959973446471469886705721287973193419489734024361060974102771686730776482217285444779897586125484868294790044340222989800738079091821598557128192667156480000000000000000000000000000000000, 38543707171800727705215657364933250819444321791546964384326881276202845420193798918144180166658987031965483631719296696351202501036957071818603525354815944336166154976340651887541505545310130488593669331551403376640000000000000000000000000000000000, 5550293832739304789551054660550388117999982337982762871343070903773209740507907044212761943998894132603029642967578724274573160149321818341878907651093495984407926316593053871805976798524658790357488383743402086236160000000000000000000000000000000000, 804792605747199194484902925779806277109997439007500616344745281047115412373646521410850481879839649227439298230298915019813108221651663659572441609408556917739149315905992811411866635786075524601835815642793302504243200000000000000000000000000000000000, 117499720439091082394795827163851716458059626095095089986332811032878850206552392125984170354456588787206137541623641592892713800361142894297576474973649309989915800122274950466132528824767026591868029083847822165619507200000000000000000000000000000000000, 17272458904546389112034986593086202319334765035978978227990923221833190980363201642519673042105118551719302218618675314155228928653088005461743741821126448568517622617974417718521481737240752909004600275325629858346067558400000000000000000000000000000000000, 2556323917872865588581178015776757943261545225324888777742656636831312265093753843092911610231557545654456728355563946494973881440657024808338073789526714388140608147460213822341179297111631430532680840748193219035217998643200000000000000000000000000000000000, 380892263763056972698595524350736933545970238573408427883655838887865527498969322620843829924502074302514052524979028027751108334657896696442372994639480443832950613971571859528835715269633083149369445271480789636247481797836800000000000000000000000000000000000, 57133839564458545904789328652610540031895535786011264182548375833179829124845398393126574488675311145377107878746854204162666250198684504466355949195922066574942592095735778929325357290444962472405416790722118445437122269675520000000000000000000000000000000000000, 8627209774233240431623188626544191544816225903687700891564804750810154197851655157362112747789971982951943289690774984828562603780001360174419748328584232052816331406456102618328128950857189333333217935399039885261005462721003520000000000000000000000000000000000000, 1311335885683452545606724671234717114812066337360530535517850322123143438073451583919041137664075741408695380032997797693941515774560206746511801745944803272028082373781327597985875600530292778666649126180654062559672830333592535040000000000000000000000000000000000000, 200634390509568239477828874698911718566246149616161171934231099284840946025238092339613294062603588435530393145048663047173051913507711632216305667129554900620296603188543122491838966881134795135997316305640071571629943041039657861120000000000000000000000000000000000000, 30897696138473508879585646703632404659201907040888820477871589289865505687886666220300447285640952619071680544337494109264649994680187591361311072737951454695525676891035640863743200899694758450943586711068571022031011228320107310612480000000000000000000000000000000000000, 4789142901463393876335775239063022722176295591337767174070096339929153381622433264146569329274347655956110484372311586936020749175429076661003216274382475477806479918110524333880196139452687559896255940215628508414806740389616633144934400000000000000000000000000000000000000, 747106292628289444708380937293831544659502112248691679154935029028947927533099589206864815366798234329153235562080607562019236871366935959116501738803666174537810867225241796085310597754619259343815926673638047312709851500780194770609766400000000000000000000000000000000000000, 117295687942641442819215807155131552511541831623044593627324799557544824622696635505477776012587322789677057983246655387237020188804608945581290772992175589402436306154362961985393763847475223716979100487761173428095446685622490578985733324800000000000000000000000000000000000000, 18532718694937347965436097530510785296823609396441045793117318330092082290386068409865488609988797000768975161352971551183449189831128213401843942132763743125584936372389347993692214687901085347282697877066265401639080576328353511479745865318400000000000000000000000000000000000000, 2946702272495038326504339507351214862194953894034126281105653614484641084171384877168612688988218723122267050655122476638168421183149385930893186799109435156968004883209906330997062135376272570217948962453536198860613811636208208325279592585625600000000000000000000000000000000000000, 471472363599206132240694321176194377951192623045460204976904578317542573467421580346978030238114995699562728104819596262106947389303901748942909887857509625114880781313585012959529941660203611234871833992565791817698209861793313332044734813700096000000000000000000000000000000000000000, 75907050539472187290751785709367294850142012310319093001281637109124354328254874435863462868336514307629599224875954998199218529677928181579808491945059049643495805791487187086484320607292781408814365272803092482649411787748723446459202305005715456000000000000000000000000000000000000000, 12296942187394494341101789284917501765723005994271693066207625211678145401177289658609880984670515317835995074429904709708273401807824365415928975695099566042246320538220924308010459938381430588227927174194100982189204709615293198326390773410925903872000000000000000000000000000000000000000, 2004401576545302577599591653441552787812849977066285969791842909503537700391898214353410600501293996807267197132074467682448564494675371562796423038301229264886150247730010662205704969956173185881152129393638460096840367667292791327201696065980922331136000000000000000000000000000000000000000, 328721858553429622726333031164414657201307396238870899045862237158580182864271307153959338482212215476391820329660212699921564577126760936298613378281401599441328640627721748601735615072812402484508949220556707455881820297436017777661078154820871262306304000000000000000000000000000000000000000, 54239106661315887749844950142128418438215720379413698342567269131165730172604765680403290849565015553604650354393935095487058155225915554489271207416431263907819225703574088519286376487014046409943976621391856730220500349076942933314077895545443758280540160000000000000000000000000000000000000000, 9003691705778437366474261723593317460743809582982673924866166675773511208652391102946946281027792581898371958829393225850851653767501982045219020431127589808697991466793298694201538496844331704050700119151048217216603057946772526930136930660543663874569666560000000000000000000000000000000000000000, 1503616514864999040201201707840084015944216200358106545452649834854176371844949314192140028931641361177028117124508668717092226179172831001551576411998307498052564574954480881931656928973003394576466919898225052275172710677111011997332867420310791867053134315520000000000000000000000000000000000000000, 252607574497319838753801886917134114678628321660161899636045172255501630469951484784279524860515748677740723676917456344471493998101035608260664837215715659672830848592352788164518364067464570288846442542901808782229015393754650015551921726612213033664926565007360000000000000000000000000000000000000000, 42690680090047052749392518888995665380688186360567361038491634111179775549421800928543239701427161526538182301399050122215682485679075017796052357489455946484708413412107621199803603527401512378815048789750405684196703601544535852628274771797464002689372589486243840000000000000000000000000000000000000000, 7257415615307998967396728211129263114716991681296451376543577798900561843401706157852350749242617459511490991237838520776666022565442753025328900773207510902400430280058295603966612599658257104398558294257568966313439612262571094946806711205568880457193340212661452800000000000000000000000000000000000000000];
  P.factorial=P.fact=function (){
    var f=OmegaNum.factorials;
    if (this.lt(0)) return OmegaNum(NaN);
    if (this.lte(170)) return OmegaNum(f[+this]);
    var errorFixer=1;
    var e=+this;
    if (e<500) e+=163879/209018880*Math.pow(e,5);
    if (e<1000) e+=-571/2488320*Math.pow(e,4);
    if (e<50000) e+=-139/51840*Math.pow(e,3);
    if (e<1e7) e+=1/288*Math.pow(e,2);
    if (e<1e20) e+=1/12*e;
    return this.div(OmegaNum(Math.E)).pow(this).mul(this.mul(OmegaNum(Math.PI)).mul(2).sqrt()).times(errorFixer);
  }
  Q.factorial=Q.fact=function (x){
    return OmegaNum(x).fact();
  }
  P.toPower=P.pow=function (other){
    var other=OmegaNum(other);
    if (OmegaNum.debug>=OmegaNum.NORMAL) console.log(this+"^"+other);
    if (other.eq(0)) return OmegaNum(1);
    if (other.eq(1)) return this.clone();
    if (other.lt(0)) return this.pow(other.neg()).rec();
    if (this.lt(0)&&other.isint()){
      if (other.mod(2).lt(1)) return this.abs().pow(other);
      return this.abs().pow(other).neg();
    }
    if (this.lt(0)) return OmegaNum(NaN);
    if (this.eq(1)) return OmegaNum(1);
    if (this.eq(0)) return OmegaNum(0);
    if (this.max(other).gt("10^^"+MAX_SAFE_INTEGER)) return this.max(other);
    if (this.eq(10)){
      if (other.gt(0)){
        other.array[1]=(other.array[1]+1)||1;
        other.standarlize();
        return other;
      }else{
        return OmegaNum(Math.pow(10,other));
      }
    }
    if (other.lt(1)) return this.root(other.rec());
    if (Math.pow(this,other)<=MAX_SAFE_INTEGER) return OmegaNum(Math.pow(this,other));
    return OmegaNum.pow(10,this.log10().mul(other));
  }
  Q.toPower=Q.pow=function (x,y){
    return OmegaNum(x).pow(y);
  }
  P.exponential=P.exp=function (){
    return OmegaNum.pow(Math.E,this);
  }
  Q.exponential=Q.exp=function (x){
    return OmegaNum.pow(Math.E,x);
  }
  P.squareRoot=P.sqrt=function (){
    return this.root(2);
  }
  Q.squareRoot=Q.sqrt=function (x){
    return OmegaNum(x).root(2);
  }
  P.cubeRoot=P.cbrt=function (){
    return this.root(3);
  }
  Q.cubeRoot=Q.cbrt=function (x){
    return OmegaNum(x).root(3);
  }
  P.root=function (other){
    var other=OmegaNum(other);
    if (OmegaNum.debug>=OmegaNum.NORMAL) console.log(this+"root"+other);
    if (other.eq(1)) return this.clone();
    if (other.lt(0)) return this.root(other.neg()).rec();
    if (other.lt(1)) return this.pow(other.rec());
    if (this.lt(0)&&other.isint()&&other.mod(2).eq(1)) return this.neg().root(other).neg();
    if (this.lt(0)) return OmegaNum(NaN);
    if (this.eq(1)) return OmegaNum(1);
    if (this.eq(0)) return OmegaNum(0);
    if (this.max(other).gt("10^^"+MAX_SAFE_INTEGER)) return this.gt(other)?this.clone():OmegaNum(0);
    return OmegaNum.pow(10,this.log10().div(other));
  }
  Q.root=function (x,y){
    return OmegaNum(x).root(y);
  }
  P.generalLogarithm=P.log10=function (){
    var x=this.clone();
    if (OmegaNum.debug>=OmegaNum.NORMAL) console.log("log"+this);
    if (x.lt(0)) return OmegaNum(NaN);
    if (x.eq(0)) return OmegaNum(-Infinity);
    if (x.lt(MAX_SAFE_INTEGER)) return OmegaNum(Math.log10(x.toNumber()));
    if (x.gt("10^^"+MAX_SAFE_INTEGER)) return x;
    x.array[1]--;
    return x.standarlize();
  }
  Q.generalLogarithm=Q.log10=function (x){
    return OmegaNum(x).log10();
  }
  P.logarithm=P.logBase=function (base){
    return this.log10().div(OmegaNum.log10(base));
  }
  Q.logarithm=Q.logBase=function (x,base){
    return OmegaNum(x).logBase(base);
  }
  P.naturalLogarithm=P.log=P.ln=function (){
    return this.logBase(Math.E);
  }
  Q.naturalLogarithm=Q.log=Q.ln=function (x){
    return OmegaNum(x).ln();
  }
  P.tetrate=P.tetr=function (other){
    var other=OmegaNum(other);
    if (OmegaNum.debug>=OmegaNum.NORMAL) console.log(this+"^^"+other);
    if (!other.isint()||other.lt(0)) return OmegaNum(NaN);
    if (this.eq(0)&&other.eq(0)) return OmegaNum(NaN);
    if (this.eq(0)) return OmegaNum(0);
    if (this.eq(1)) return OmegaNum(1);
    if (other.eq(0)) return OmegaNum(1);
    if (other.eq(1)) return this.clone();
    if (other.eq(2)) return this.pow(this);
    if (this.eq(2)&&other.eq(3)) return OmegaNum(16);
    if (this.eq(2)&&other.eq(4)) return OmegaNum(65536);
    if (this.max(other).gt("10^^^"+MAX_SAFE_INTEGER)) return this.max(other);
    if (other.gt(MAX_SAFE_INTEGER)){
      other.array[2]=(other.array[2]+1)||1;
      other.standarlize();
      return other;
    }
    var r=this.pow(this.pow(this));
    other=other.sub(3);
    while (other.gt(0)&&r.lt("e"+MAX_SAFE_INTEGER)){
      r=this.pow(r);
      other=other.sub(1);
    }
    r.array[1]=(r.array[1]+other.toNumber())||other.toNumber();
    r.standarlize();
    return r;
  }
  Q.tetrate=Q.tetr=function (x,y){
    return OmegaNum(x).tetr(y);
  }
  P.pentate=P.pent=function (other){
    return this.arrow(3)(other);
  }
  Q.pentate=Q.pent=function (x,y){
    return OmegaNum.arrow(x,3,y);
  }
  P.arrow=function (arrows){
    var arrows=OmegaNum(arrows);
    if (!arrows.isint()||arrows.lt(0)) return other=>OmegaNum(NaN);
    if (arrows.eq(0)) return other=>this.mul(other);
    if (arrows.eq(1)) return other=>this.pow(other);
    if (arrows.eq(2)) return other=>this.tetr(other);
    return other=>{
      var other=OmegaNum(other);
      if (OmegaNum.debug>=OmegaNum.NORMAL) console.log(this+"{"+arrows+"}"+other);
      if (!other.isint()||other.lt(0)) return OmegaNum(NaN);
      if (other.eq(0)) return OmegaNum(1);
      if (other.eq(1)) return this.clone();
      if (arrows.gte(OmegaNum.maxArrow)){
        console.warn("Number too large to reasonably handle it: tried to "+arrows.add(2)+"-ate.");
        return OmegaNum(Infinity);
      }
      if (other.eq(2)) return this.arrow(arrows-1)(this);
      if (this.max(other).gt("10{"+(arrows.add(1))+"}"+MAX_SAFE_INTEGER)) return this.max(other);
      if (other.gt(MAX_SAFE_INTEGER)){
        other.array[arrows]=(other.array[arrows]+1)||1;
        other.standarlize();
        return other;
      }
      var r=this.arrow(arrows-1)(this.arrow(arrows-1)(this));
      r.array[arrows-1]=(r.array[arrows-1]+other.sub(3).toNumber())||other.sub(3).toNumber();
      r.standarlize();
      return r;
    };
  }
  P.chain=function (other,arrows){
    return this.arrow(arrows)(other)
  }
  Q.arrow=function (x,z,y){
    return OmegaNum(x).arrow(z)(y);
  }
  Q.chain=function (x,y,z){
    return OmegaNum(x).arrow(z)(y);
  }
  Q.hyper=function (z){
    z=OmegaNum(z);
    if (z.eq(0)) return (x,y)=>OmegaNum(y).eq(0)?OmegaNum(x):OmegaNum(x).add(1);
    if (z.eq(1)) return (x,y)=>OmegaNum.add(x,y);
    return (x,y)=>OmegaNum(x).arrow(z.sub(2))(y);
  }
  // All of these are from Patashu's Break_Eternity.js
  Q.affordGeometricSeries = function (resourcesAvailable, priceStart, priceRatio, currentOwned) {
	/*
		If you have resourcesAvailable, the price of something starts at
		priceStart, and on each purchase it gets multiplied by priceRatio,
		and you have already bought currentOwned, how many of the object
		can you buy.
	*/
	let actualStart = priceStart.mul(priceRatio.pow(currentOwned));
	return OmegaNum.floor(resourcesAvailable.div(actualStart).mul(priceRatio.sub(1)).add(1).log10().div(priceRatio.log10()));
  }
  Q.affordArithmeticSeries = function (resourcesAvailable, priceStart, priceAdd, currentOwned) {
	/*
		If you have resourcesAvailable, the price of something starts at
		priceStart, and on each purchase it gets increased by priceAdd,
		and you have already bought currentOwned, how many of the object
		can you buy.
	*/
	var actualStart = priceStart.add(currentOwned.mul(priceAdd));
	var b = actualStart.sub(priceAdd.div(2));
	var b2 = b.pow(2);
	return b.neg().add(b2.add(priceAdd.mul(resourcesAvailable).mul(2)).sqrt()).div(priceAdd).floor();
  }
  Q.sumGeometricSeries = function (numItems, priceStart, priceRatio, currentOwned) {
	/*
		If you want to buy numItems of something, the price of something starts at
		priceStart, and on each purchase it gets multiplied by priceRatio,
		and you have already bought currentOwned, what will be the price of numItems
		of something.
	*/
	return priceStart.mul(priceRatio.pow(currentOwned)).mul(OmegaNum.sub(1, priceRatio.pow(numItems))).div(OmegaNum.sub(1, priceRatio));
  }
  Q.sumArithmeticSeries = function (numItems, priceStart, priceAdd, currentOwned) {
	/*
		If you want to buy numItems of something, the price of something starts at
		priceStart, and on each purchase it gets increased by priceAdd,
		and you have already bought currentOwned, what will be the price of numItems
		of something.
	*/
	var actualStart = priceStart.add(currentOwned.mul(priceAdd));

	return numItems.div(2).mul(actualStart.mul(2).plus(numItems.sub(1).mul(priceAdd)));
  }
  // Binomial Coefficients n choose k
  Q.choose = function (n, k) {
	  /*
		If you have n items and you take k out,
		how many ways could you do this?
	  */
	  return OmegaNum(n).factorial().div(OmegaNum(k).factorial().mul(OmegaNum(n).sub(OmegaNum(k)).factorial()));
  }
  P.choose = function (other) {
	  return OmegaNum.choose(this, other);
  }
  P.standarlize=function (){
  	var b;
    var x=this;
    if (OmegaNum.debug>=OmegaNum.ALL) console.log(x.toString());
    if (!x.array.length) x.array=[0];
    for (var i=0;i<x.array.length;i++){
      if (x.array[i]==null){
        x.array[i]=0;
      }
      if (isNaN(x.array[i])){
        x.array=[NaN];
        return;
      }
      if (!isFinite(x.array[i])){
        x.array=[Infinity];
        return;
      }
    }
    do{
      if (OmegaNum.debug>=OmegaNum.ALL) console.log(x.toString());
      b=false;
      while (x.array[x.array.length-1]===0){
      	x.array.pop();
      	b=true;
      }
      if (x.array[0]>MAX_SAFE_INTEGER){
        if (!x.array[1]) x.array[1]=0;
        x.array[1]++;
        x.array[0]=Math.log10(x.array[0]);
        b=true;
      }
      if ((x.array[0]<MAX_E)&&(x.array[1])){
        x.array[0]=Math.pow(10,x.array[0]);
        x.array[1]--;
        b=true;
      }
      if ((x.array[0]<MAX_SAFE_INTEGER)&&(!x.array[1])&&(x.array.length>2)){
        for (var i=2;!(this.array[i])&&(i<this.array.length);i++) continue;
        x.array[i-1]=x.array[0];
        x.array[0]=10;
        x.array[i]--;
        b=true;
      }
      for (var i=1;i<x.array.length;i++){
        if (x.array[i]>MAX_SAFE_INTEGER){
          if (!x.array[i+1]) x.array[i+1]=0;
          x.array[i+1]++;
          x.array[0]=x.array[i]+1;
          x.array[i]=0;
          b=true;
        }
      }
    }while(b);
    if (!x.array.length) x.array=[0];
    return x;
  }
  P.toNumber=function (){
    //console.log(this.array);
    if (this.sign==-1) return -1*this.abs();
    if ((this.array[1]>=2)||((this.array[1]==1)&&(this.array[0]>Math.log10(2)*1024))) return Infinity;
    for (var i=2;i<this.array.length;i++) if (this.array[i]) return Infinity;
    if (this.array[1]==1) return Math.pow(10,this.array[0]);
    return this.array[0];
  }
  P.toString=function (){
    if (this.sign==-1) return "-"+this.abs();
    if (isNaN(this.array[0])) return "NaN";
    if (!isFinite(this.array[0])) return "Infinity";
    var b=false;
    for (var i=2;!b&&(i<this.array.length);i++) if (this.array[i]) b=true;
    if (b){
      var s="";
      for (var i=2;i<this.array.length;i++){
        var q=i>=5?"{"+i+"}":"^".repeat(i);
        if (this.array[i]>1) s="(10"+q+")^"+this.array[i]+" "+s;
        else if (this.array[i]==1) s="10"+q+s;
      }
      return s+new OmegaNum(this.array.slice(0,2));
    }else if (!this.array[1]) return String(this.toNumber());
    else if (this.array[1]<3) return "e".repeat(this.array[1]-1)+Math.pow(10,this.array[0]-Math.floor(this.array[0]))+"e"+Math.floor(this.array[0]);
    else if (this.array[1]<8) return "e".repeat(this.array[1])+this.array[0];
    else return "(10^)^"+this.array[1]+" "+this.array[0];
  }
  P.clone=function (){
    return OmegaNum(this);
  }
  // OmegaNum methods

  /*
   *  clone
   *  config/set
   */

  /*
   * Create and return a OmegaNum constructor with the same configuration properties as this OmegaNum constructor.
   *
   */
  function clone(obj) {
    var i, p, ps;
    function OmegaNum(input) {
      var x=this;
      if (!(x instanceof OmegaNum)) return new OmegaNum(input);
      x.constructor=OmegaNum;
      x.array=[];
      x.sign=1;
      if (typeof input=="number"){
        x.array[0]=Math.abs(input);
        x.sign=input<0?-1:1;
      }else if (typeof input=="string"){
        if (!input||input=="NaN") x=OmegaNum(NaN);
        if (input=="Infinity") x=OmegaNum(Infinity);
        var negateIt=false;
        if (input[0]=="-"){
          negateIt=true;
          input=input.substring(1);
        }
        if (input.indexOf("10")==0){
          var w=input.substring(2).search(/[0-9e]/);
          if (input[2]=="{") w=input.substring(2).search("}")+1;
          if (w==-1) x=OmegaNum(NaN);
          var s=input.substring(2,w+2);
          var r=OmegaNum(input.substring(w+2));
          if (r.isNaN()) x=r;
          if (s[0]=="^"){
            r.array[w]=(r.array[w]+1)||1;
          }else if (s[0]=="{"){
            var n=Number(s.substring(1,w-1));
            if (isNaN(n)) x=OmegaNum(NaN);
            if (n<=0) x=OmegaNum(NaN);
            if (n>=OmegaNum.maxArrow){
              console.warn("Number too large to reasonably handle it: tried to "+arrows.add(2)+"-ate.");
              x=OmegaNum(Infinity);
            }
            r.array[n]=(r.array[n]+1)||1;
          }else x=OmegaNum(NaN);
          x=r;
        }else if (input.indexOf("e")==-1){
          x.array[0]=Number(input);
        }else{
          x.array=[0,input.search(/[0-9]/)];
          var s=input.substring(input.search(/[0-9]/)
          );
          if (isFinite(Number(s))){
            x.array[0]=Number(s);
          }else{
            x.array[0]=Number(s.substring(s.indexOf("e")+1));
            if (s.indexOf("e")>0) x.array[0]+=Math.log10(Number(s.substring(0,s.indexOf("e"))));
            x.array[1]++;
          }
        }
        if (negateIt) x.sign*=-1;
      }else if (input instanceof Array){
        x.array=input.slice(0);
        x.sign=1;
      }else if (input instanceof OmegaNum){
      	x.array=input.array.slice(0);
        x.sign=input.sign;
      }else{
        x=OmegaNum(NaN);
      }
      x.standarlize();
      return x;
    }
    OmegaNum.prototype = P;

    OmegaNum.ROUND_UP = 0;
    OmegaNum.ROUND_DOWN = 1;
    OmegaNum.ROUND_CEIL = 2;
    OmegaNum.ROUND_FLOOR = 3;
    OmegaNum.ROUND_HALF_UP = 4;
    OmegaNum.ROUND_HALF_DOWN = 5;
    OmegaNum.ROUND_HALF_EVEN = 6;
    OmegaNum.ROUND_HALF_CEIL = 7;
    OmegaNum.ROUND_HALF_FLOOR = 8;
    
    OmegaNum.NONE = 0;
    OmegaNum.NORMAL = 1;
    OmegaNum.ALL = 2;

    OmegaNum.clone=clone;
    OmegaNum.config=OmegaNum.set=config;
    OmegaNum=Object.assign(OmegaNum,Q);
    
    if (obj === void 0) obj = {};
    if (obj) {
      ps = ['rounding', 'maxArrow', 'debug'];
      for (i = 0; i < ps.length;) if (!obj.hasOwnProperty(p = ps[i++])) obj[p] = this[p];
    }

    OmegaNum.config(obj);
    
    return OmegaNum;
  }


  /*
   * Configure global settings for a OmegaNum constructor.
   *
   * `obj` is an object with one or more of the following properties,
   *
   *   precision  {number}
   *   rounding   {number}
   *   toExpNeg   {number}
   *   toExpPos   {number}
   *
   * E.g. OmegaNum.config({ precision: 20, rounding: 4 })
   *
   */
  function config(obj){
    if (!obj||typeof obj!=='object') {
      throw Error(decimalError+'Object expected');
    }
    var i,p,v,
      ps = [
        'rounding',0,8,
        'maxArrow',1,Number.MAX_SAFE_INTEGER,
        'debug',0,2
      ];
    for (i = 0; i < ps.length; i += 3) {
      if ((v = obj[p = ps[i]]) !== void 0) {
        if (mathfloor(v) === v && v >= ps[i + 1] && v <= ps[i + 2]) this[p] = v;
        else throw Error(invalidArgument + p + ': ' + v);
      }
    }

    return this;
  }


  // Create and configure initial OmegaNum constructor.
  OmegaNum=clone(OmegaNum);

  OmegaNum['default']=OmegaNum.OmegaNum=OmegaNum;

  // Export.

  // AMD.
  if (typeof define == 'function' && define.amd) {
    define(function () {
      return OmegaNum;
    });
  // Node and other environments that support module.exports.
  } else if (typeof module != 'undefined' && module.exports) {
    module.exports = OmegaNum;
    // Browser.
  } else {
    if (!globalScope) {
      globalScope = typeof self != 'undefined' && self && self.self == self
        ? self : Function('return this')();
    }
    globalScope.OmegaNum = OmegaNum;
  }
})(this);
